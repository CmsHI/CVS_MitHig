#!/bin/sh

#
# $Id: submit 37 2007-05-25 03:34:24Z MaartenBallintijn $
#
# (Re)Submit a sequence of CMSSW jobs
#

prog=`basename $0`
pdir=`dirname $0`

usage()
{
   cat <<EOF >&2

Usage: $prog [-h] [-n] [-r] [-l] [-g] [-k gatekeeper] template.cfg [-f runnumberfile | njobs [ifirst] ] 

   -h    this information.
   -n    create all files but do not call condor_submit
   -r    re-submit failed jobs
   -g    submit to the grid
   -k    specify a gatekeeper
   -l    limit the number of jobs to half the VMs

   specify 

   -f    specify a file with one run number per line

   or njobs and optionally ifirst

EOF

   exit 1
}

while getopts :rgnhlk:f: options; do
  case $options in
    r) resubmit=1;;
    g) usegrid=1;;
    n) nosubmit=1;;
    l) limitvms=1;;
    h) usage;;
    k) gatekeeper=$OPTARG;;
    f) runnumfile=$OPTARG;;
    *) echo $usage
  esac
done

shift $(($OPTIND - 1))

[ $# -eq 2 -o $# -eq 3 -o \( -n "$runnumfile" -a $# -eq 1 \) ] || usage;

cfgtemplate=$1
njobs=$2
ifirst=${3:-1}

#if [ -n "$gatekeeper" ]; then
#echo "Grid resource is set to $gatekeeper"
#else
#gatekeeper=ce01.cmsaf.mit.edu/jobmanager-condor
#echo "Using default grid resource: $gatekeeper"
#fi

if [ -n "$runnumfile" ]; then
   runlist=`cat $runnumfile | sed 's/^0*//g'`
else
   let last=$ifirst+$njobs-1
   runlist=`seq $ifirst $last`
fi


maxevents=5

#
# Load Job Configuration Parameters
#

# Defaults
JOB_GRID="ce01.cmsaf.mit.edu/jobmanager-condor"
proxy=/tmp/x509up_u1624
eval `sed -e '1,/^#CFGSTART/d' -e '/^#CFGEND/,$d' -e 's/^#[ 	]*//' -e '/^[ 	]*$/d' < $cfgtemplate`
gatekeeper=$JOB_GRID

echo "Grid resource is set to $gatekeeper"

#
# Prepare input files: run, *.cfg
#

mkdir -p $JOB_BASE

for run in $runlist
do
   frun=`printf "%06d" $run` 
   jobdir=$JOB_BASE/${JOB_VERSION}/$frun
   cfg=${jobdir}/$cfgtemplate
   if [ -z "$resubmit" ]; then
      if [ -d "$jobdir" ]; then
         echo "$0: Job-dir exists already ($jobdir). Aborting submit."
         exit 1
      fi

      firstevent=$(($maxevents * $run + 1))

      mkdir -p $jobdir
      cp $pdir/run $jobdir
      base="${JOB_TAG}_r$frun"
      input=`echo $base | sed "s/rec/sim/g"` 
      if [ -n "$JOB_USERANDOM" ]; then
         sed -e "s/__BASE__/$base/" -e "s/__INPUT__/$input/" -e "s/__RANDOM__/$RANDOM/" -e "s/__MAXEVENTS__/$maxevents/" -e "s/__EVENT__/$firstevent/"< $cfgtemplate > $cfg
      else
         sed -e "s/__BASE__/$base/" -e "s/__INPUT__/$input/" -e "s/__RANDOM__/42/" < $cfgtemplate > $cfg
      fi
#      sed -e "s/__BASE__/$base/" -e "s/__TYPE__/$JOB_TYPE/" < test.cfg > ${jobdir}/test.cfg
   else
      if [ ! -d "$jobdir" ]; then
         echo "$0: Job-dir for resubmit not found ($jobdir). Aborting submit."
         exit 1
      fi
      if [ ! -f "$cfg" ]; then
         echo "$0: Config file for resubmit not found ($cfg). Aborting submit."
         exit 1
      fi
   fi
done


# Prepare condor files

datestring=`date +-%g%m%d-%H%M%S`
condor=subfile${datestring}.condor

if [ -n "$usegrid" ]; then
   cat > $condor <<EOF
Universe       = grid
Grid_resource  = gt2 $gatekeeper
x509userproxy = $proxy

EOF
else
   cat > $condor <<EOF
Universe       = vanilla
EOF
fi

[ -n "$limitvms" ] && REQVM="&& (VirtualMachineID > (TotalCpus/2))"

cat >> $condor <<EOF

Arguments      = $cfgtemplate
Input          = /dev/null
Output         = run.out
Error          = run.err
Log            = run.log

# prefer to run on fast computers
Rank           = kflops

# not only run on 64 bit computers
Requirements   = (Arch == "X86_64" || Arch == "INTEL") $REQVM

# should write all output & logs to a local directory
# and then transfer it back to Initialdir on completion
should_transfer_files   = YES
when_to_transfer_output = ON_EXIT

+JOB_TAG = "$JOB_TAG"

EOF

for run in $runlist
do
   frun=`printf "%06d" $run` 
   jobdir=${JOB_BASE}/${JOB_VERSION}/$frun
   cfg=${jobdir}/$cfgtemplate
   echo "Initialdir              = $jobdir" >> $condor
   echo "Executable              = ${JOB_BASE}/${JOB_VERSION}/$frun/run" >> $condor
   echo "transfer_input_files    = $cfgtemplate" >> $condor
   echo "+JOB_RUN    = $run" >> $condor
   echo "Queue" >> $condor
   echo >> $condor
done

# Finally, submit the jobs

 [ -z "$nosubmit" ] && condor_submit $condor
